// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quobyte/api/quobyte (interfaces: ExtendedQuobyteApi)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination ../mocks/mock_quobyte_api.go github.com/quobyte/api/quobyte ExtendedQuobyteApi
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	quobyte "github.com/quobyte/api/quobyte"
	gomock "go.uber.org/mock/gomock"
)

// MockExtendedQuobyteApi is a mock of ExtendedQuobyteApi interface.
type MockExtendedQuobyteApi struct {
	ctrl     *gomock.Controller
	recorder *MockExtendedQuobyteApiMockRecorder
}

// MockExtendedQuobyteApiMockRecorder is the mock recorder for MockExtendedQuobyteApi.
type MockExtendedQuobyteApiMockRecorder struct {
	mock *MockExtendedQuobyteApi
}

// NewMockExtendedQuobyteApi creates a new mock instance.
func NewMockExtendedQuobyteApi(ctrl *gomock.Controller) *MockExtendedQuobyteApi {
	mock := &MockExtendedQuobyteApi{ctrl: ctrl}
	mock.recorder = &MockExtendedQuobyteApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtendedQuobyteApi) EXPECT() *MockExtendedQuobyteApiMockRecorder {
	return m.recorder
}

// AcceptTermsAndConditions mocks base method.
func (m *MockExtendedQuobyteApi) AcceptTermsAndConditions(arg0 *quobyte.AcceptTermsAndConditionsRequest) (*quobyte.AcceptTermsAndConditionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptTermsAndConditions", arg0)
	ret0, _ := ret[0].(*quobyte.AcceptTermsAndConditionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptTermsAndConditions indicates an expected call of AcceptTermsAndConditions.
func (mr *MockExtendedQuobyteApiMockRecorder) AcceptTermsAndConditions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptTermsAndConditions", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).AcceptTermsAndConditions), arg0)
}

// AcknowledgeAlert mocks base method.
func (m *MockExtendedQuobyteApi) AcknowledgeAlert(arg0 *quobyte.AcknowledgeAlertRequest) (*quobyte.AcknowledgeAlertResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcknowledgeAlert", arg0)
	ret0, _ := ret[0].(*quobyte.AcknowledgeAlertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcknowledgeAlert indicates an expected call of AcknowledgeAlert.
func (mr *MockExtendedQuobyteApiMockRecorder) AcknowledgeAlert(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcknowledgeAlert", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).AcknowledgeAlert), arg0)
}

// AddCa mocks base method.
func (m *MockExtendedQuobyteApi) AddCa(arg0 *quobyte.AddCaRequest) (*quobyte.AddCaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCa", arg0)
	ret0, _ := ret[0].(*quobyte.AddCaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCa indicates an expected call of AddCa.
func (mr *MockExtendedQuobyteApiMockRecorder) AddCa(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCa", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).AddCa), arg0)
}

// AddCertificate mocks base method.
func (m *MockExtendedQuobyteApi) AddCertificate(arg0 *quobyte.AddCertificateRequest) (*quobyte.AddCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCertificate", arg0)
	ret0, _ := ret[0].(*quobyte.AddCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCertificate indicates an expected call of AddCertificate.
func (mr *MockExtendedQuobyteApiMockRecorder) AddCertificate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificate", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).AddCertificate), arg0)
}

// AddCsr mocks base method.
func (m *MockExtendedQuobyteApi) AddCsr(arg0 *quobyte.AddCsrRequest) (*quobyte.AddCsrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCsr", arg0)
	ret0, _ := ret[0].(*quobyte.AddCsrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCsr indicates an expected call of AddCsr.
func (mr *MockExtendedQuobyteApiMockRecorder) AddCsr(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCsr", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).AddCsr), arg0)
}

// AddRegistryReplica mocks base method.
func (m *MockExtendedQuobyteApi) AddRegistryReplica(arg0 *quobyte.AddRegistryReplicaRequest) (*quobyte.AddRegistryReplicaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRegistryReplica", arg0)
	ret0, _ := ret[0].(*quobyte.AddRegistryReplicaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRegistryReplica indicates an expected call of AddRegistryReplica.
func (mr *MockExtendedQuobyteApiMockRecorder) AddRegistryReplica(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRegistryReplica", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).AddRegistryReplica), arg0)
}

// AnalyzeVolumes mocks base method.
func (m *MockExtendedQuobyteApi) AnalyzeVolumes(arg0 *quobyte.AnalyzeVolumesRequest) (*quobyte.AnalyzeVolumesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeVolumes", arg0)
	ret0, _ := ret[0].(*quobyte.AnalyzeVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeVolumes indicates an expected call of AnalyzeVolumes.
func (mr *MockExtendedQuobyteApiMockRecorder) AnalyzeVolumes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeVolumes", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).AnalyzeVolumes), arg0)
}

// CancelNetworkTest mocks base method.
func (m *MockExtendedQuobyteApi) CancelNetworkTest(arg0 *quobyte.CancelNetworkTestRequest) (*quobyte.CancelNetworkTestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelNetworkTest", arg0)
	ret0, _ := ret[0].(*quobyte.CancelNetworkTestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelNetworkTest indicates an expected call of CancelNetworkTest.
func (mr *MockExtendedQuobyteApiMockRecorder) CancelNetworkTest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelNetworkTest", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CancelNetworkTest), arg0)
}

// CancelQuery mocks base method.
func (m *MockExtendedQuobyteApi) CancelQuery(arg0 *quobyte.CancelQueryRequest) (*quobyte.CancelQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelQuery", arg0)
	ret0, _ := ret[0].(*quobyte.CancelQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelQuery indicates an expected call of CancelQuery.
func (mr *MockExtendedQuobyteApiMockRecorder) CancelQuery(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelQuery", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CancelQuery), arg0)
}

// CancelSupportDump mocks base method.
func (m *MockExtendedQuobyteApi) CancelSupportDump(arg0 *quobyte.CancelSupportDumpRequest) (*quobyte.CancelSupportDumpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSupportDump", arg0)
	ret0, _ := ret[0].(*quobyte.CancelSupportDumpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSupportDump indicates an expected call of CancelSupportDump.
func (mr *MockExtendedQuobyteApiMockRecorder) CancelSupportDump(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSupportDump", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CancelSupportDump), arg0)
}

// CancelTask mocks base method.
func (m *MockExtendedQuobyteApi) CancelTask(arg0 *quobyte.CancelTaskRequest) (*quobyte.CancelTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTask", arg0)
	ret0, _ := ret[0].(*quobyte.CancelTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTask indicates an expected call of CancelTask.
func (mr *MockExtendedQuobyteApiMockRecorder) CancelTask(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CancelTask), arg0)
}

// CancelVolumeErasure mocks base method.
func (m *MockExtendedQuobyteApi) CancelVolumeErasure(arg0 *quobyte.CancelVolumeErasureRequest) (*quobyte.CancelVolumeErasureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelVolumeErasure", arg0)
	ret0, _ := ret[0].(*quobyte.CancelVolumeErasureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelVolumeErasure indicates an expected call of CancelVolumeErasure.
func (mr *MockExtendedQuobyteApiMockRecorder) CancelVolumeErasure(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelVolumeErasure", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CancelVolumeErasure), arg0)
}

// ChangePolicyRulePriority mocks base method.
func (m *MockExtendedQuobyteApi) ChangePolicyRulePriority(arg0 *quobyte.ChangePolicyRulePriorityRequest) (*quobyte.ChangePolicyRulePriorityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePolicyRulePriority", arg0)
	ret0, _ := ret[0].(*quobyte.ChangePolicyRulePriorityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePolicyRulePriority indicates an expected call of ChangePolicyRulePriority.
func (mr *MockExtendedQuobyteApiMockRecorder) ChangePolicyRulePriority(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePolicyRulePriority", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ChangePolicyRulePriority), arg0)
}

// ConfigureRule mocks base method.
func (m *MockExtendedQuobyteApi) ConfigureRule(arg0 *quobyte.ConfigureRuleRequest) (*quobyte.ConfigureRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureRule", arg0)
	ret0, _ := ret[0].(*quobyte.ConfigureRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureRule indicates an expected call of ConfigureRule.
func (mr *MockExtendedQuobyteApiMockRecorder) ConfigureRule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureRule", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ConfigureRule), arg0)
}

// CreateAccessKeyCredentials mocks base method.
func (m *MockExtendedQuobyteApi) CreateAccessKeyCredentials(arg0 *quobyte.CreateAccessKeyCredentialsRequest) (*quobyte.CreateAccessKeyCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessKeyCredentials", arg0)
	ret0, _ := ret[0].(*quobyte.CreateAccessKeyCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessKeyCredentials indicates an expected call of CreateAccessKeyCredentials.
func (mr *MockExtendedQuobyteApiMockRecorder) CreateAccessKeyCredentials(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessKeyCredentials", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CreateAccessKeyCredentials), arg0)
}

// CreateMasterKeystoreSlot mocks base method.
func (m *MockExtendedQuobyteApi) CreateMasterKeystoreSlot(arg0 *quobyte.CreateMasterKeystoreSlotRequest) (*quobyte.CreateMasterKeystoreSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMasterKeystoreSlot", arg0)
	ret0, _ := ret[0].(*quobyte.CreateMasterKeystoreSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMasterKeystoreSlot indicates an expected call of CreateMasterKeystoreSlot.
func (mr *MockExtendedQuobyteApiMockRecorder) CreateMasterKeystoreSlot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMasterKeystoreSlot", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CreateMasterKeystoreSlot), arg0)
}

// CreateMirroredVolume mocks base method.
func (m *MockExtendedQuobyteApi) CreateMirroredVolume(arg0 *quobyte.CreateMirroredVolumeRequest) (*quobyte.CreateMirroredVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMirroredVolume", arg0)
	ret0, _ := ret[0].(*quobyte.CreateMirroredVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMirroredVolume indicates an expected call of CreateMirroredVolume.
func (mr *MockExtendedQuobyteApiMockRecorder) CreateMirroredVolume(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMirroredVolume", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CreateMirroredVolume), arg0)
}

// CreateNewUserKeystoreSlot mocks base method.
func (m *MockExtendedQuobyteApi) CreateNewUserKeystoreSlot(arg0 *quobyte.CreateNewUserKeystoreSlotRequest) (*quobyte.CreateNewUserKeystoreSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUserKeystoreSlot", arg0)
	ret0, _ := ret[0].(*quobyte.CreateNewUserKeystoreSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUserKeystoreSlot indicates an expected call of CreateNewUserKeystoreSlot.
func (mr *MockExtendedQuobyteApiMockRecorder) CreateNewUserKeystoreSlot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUserKeystoreSlot", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CreateNewUserKeystoreSlot), arg0)
}

// CreateNotificationRule mocks base method.
func (m *MockExtendedQuobyteApi) CreateNotificationRule(arg0 *quobyte.CreateNotificationRuleRequest) (*quobyte.CreateNotificationRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotificationRule", arg0)
	ret0, _ := ret[0].(*quobyte.CreateNotificationRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotificationRule indicates an expected call of CreateNotificationRule.
func (mr *MockExtendedQuobyteApiMockRecorder) CreateNotificationRule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotificationRule", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CreateNotificationRule), arg0)
}

// CreatePolicyRule mocks base method.
func (m *MockExtendedQuobyteApi) CreatePolicyRule(arg0 *quobyte.CreatePolicyRuleRequest) (*quobyte.CreatePolicyRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyRule", arg0)
	ret0, _ := ret[0].(*quobyte.CreatePolicyRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyRule indicates an expected call of CreatePolicyRule.
func (mr *MockExtendedQuobyteApiMockRecorder) CreatePolicyRule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyRule", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CreatePolicyRule), arg0)
}

// CreatePolicyRuleSet mocks base method.
func (m *MockExtendedQuobyteApi) CreatePolicyRuleSet(arg0 *quobyte.CreatePolicyRuleSetRequest) (*quobyte.CreatePolicyRuleSetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyRuleSet", arg0)
	ret0, _ := ret[0].(*quobyte.CreatePolicyRuleSetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyRuleSet indicates an expected call of CreatePolicyRuleSet.
func (mr *MockExtendedQuobyteApiMockRecorder) CreatePolicyRuleSet(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyRuleSet", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CreatePolicyRuleSet), arg0)
}

// CreateSnapshot mocks base method.
func (m *MockExtendedQuobyteApi) CreateSnapshot(arg0 *quobyte.CreateSnapshotRequest) (*quobyte.CreateSnapshotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", arg0)
	ret0, _ := ret[0].(*quobyte.CreateSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockExtendedQuobyteApiMockRecorder) CreateSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CreateSnapshot), arg0)
}

// CreateTask mocks base method.
func (m *MockExtendedQuobyteApi) CreateTask(arg0 *quobyte.CreateTaskRequest) (*quobyte.CreateTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0)
	ret0, _ := ret[0].(*quobyte.CreateTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockExtendedQuobyteApiMockRecorder) CreateTask(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CreateTask), arg0)
}

// CreateUser mocks base method.
func (m *MockExtendedQuobyteApi) CreateUser(arg0 *quobyte.CreateUserRequest) (*quobyte.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*quobyte.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockExtendedQuobyteApiMockRecorder) CreateUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CreateUser), arg0)
}

// CreateVolume mocks base method.
func (m *MockExtendedQuobyteApi) CreateVolume(arg0 *quobyte.CreateVolumeRequest) (*quobyte.CreateVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0)
	ret0, _ := ret[0].(*quobyte.CreateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockExtendedQuobyteApiMockRecorder) CreateVolume(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).CreateVolume), arg0)
}

// DecideCsr mocks base method.
func (m *MockExtendedQuobyteApi) DecideCsr(arg0 *quobyte.DecideCsrRequest) (*quobyte.DecideCsrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecideCsr", arg0)
	ret0, _ := ret[0].(*quobyte.DecideCsrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecideCsr indicates an expected call of DecideCsr.
func (mr *MockExtendedQuobyteApiMockRecorder) DecideCsr(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecideCsr", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DecideCsr), arg0)
}

// DeleteAccessKeyCredentials mocks base method.
func (m *MockExtendedQuobyteApi) DeleteAccessKeyCredentials(arg0 *quobyte.DeleteAccessKeyCredentialsRequest) (*quobyte.DeleteAccessKeyCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessKeyCredentials", arg0)
	ret0, _ := ret[0].(*quobyte.DeleteAccessKeyCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessKeyCredentials indicates an expected call of DeleteAccessKeyCredentials.
func (mr *MockExtendedQuobyteApiMockRecorder) DeleteAccessKeyCredentials(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessKeyCredentials", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeleteAccessKeyCredentials), arg0)
}

// DeleteCa mocks base method.
func (m *MockExtendedQuobyteApi) DeleteCa(arg0 *quobyte.DeleteCaRequest) (*quobyte.DeleteCaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCa", arg0)
	ret0, _ := ret[0].(*quobyte.DeleteCaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCa indicates an expected call of DeleteCa.
func (mr *MockExtendedQuobyteApiMockRecorder) DeleteCa(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCa", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeleteCa), arg0)
}

// DeleteCertificate mocks base method.
func (m *MockExtendedQuobyteApi) DeleteCertificate(arg0 *quobyte.DeleteCertificateRequest) (*quobyte.DeleteCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificate", arg0)
	ret0, _ := ret[0].(*quobyte.DeleteCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCertificate indicates an expected call of DeleteCertificate.
func (mr *MockExtendedQuobyteApiMockRecorder) DeleteCertificate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeleteCertificate), arg0)
}

// DeleteConfiguration mocks base method.
func (m *MockExtendedQuobyteApi) DeleteConfiguration(arg0 *quobyte.DeleteConfigurationRequest) (*quobyte.DeleteConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguration", arg0)
	ret0, _ := ret[0].(*quobyte.DeleteConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfiguration indicates an expected call of DeleteConfiguration.
func (mr *MockExtendedQuobyteApiMockRecorder) DeleteConfiguration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguration", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeleteConfiguration), arg0)
}

// DeleteCsr mocks base method.
func (m *MockExtendedQuobyteApi) DeleteCsr(arg0 *quobyte.DeleteCsrRequest) (*quobyte.DeleteCsrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCsr", arg0)
	ret0, _ := ret[0].(*quobyte.DeleteCsrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCsr indicates an expected call of DeleteCsr.
func (mr *MockExtendedQuobyteApiMockRecorder) DeleteCsr(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCsr", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeleteCsr), arg0)
}

// DeleteLabels mocks base method.
func (m *MockExtendedQuobyteApi) DeleteLabels(arg0 *quobyte.DeleteLabelsRequest) (*quobyte.DeleteLabelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabels", arg0)
	ret0, _ := ret[0].(*quobyte.DeleteLabelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLabels indicates an expected call of DeleteLabels.
func (mr *MockExtendedQuobyteApiMockRecorder) DeleteLabels(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabels", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeleteLabels), arg0)
}

// DeleteNotificationRule mocks base method.
func (m *MockExtendedQuobyteApi) DeleteNotificationRule(arg0 *quobyte.DeleteNotificationRuleRequest) (*quobyte.DeleteNotificationRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotificationRule", arg0)
	ret0, _ := ret[0].(*quobyte.DeleteNotificationRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNotificationRule indicates an expected call of DeleteNotificationRule.
func (mr *MockExtendedQuobyteApiMockRecorder) DeleteNotificationRule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotificationRule", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeleteNotificationRule), arg0)
}

// DeletePolicyRules mocks base method.
func (m *MockExtendedQuobyteApi) DeletePolicyRules(arg0 *quobyte.DeletePolicyRulesRequest) (*quobyte.DeletePolicyRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyRules", arg0)
	ret0, _ := ret[0].(*quobyte.DeletePolicyRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyRules indicates an expected call of DeletePolicyRules.
func (mr *MockExtendedQuobyteApiMockRecorder) DeletePolicyRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyRules", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeletePolicyRules), arg0)
}

// DeleteSnapshot mocks base method.
func (m *MockExtendedQuobyteApi) DeleteSnapshot(arg0 *quobyte.DeleteSnapshotRequest) (*quobyte.DeleteSnapshotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", arg0)
	ret0, _ := ret[0].(*quobyte.DeleteSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockExtendedQuobyteApiMockRecorder) DeleteSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeleteSnapshot), arg0)
}

// DeleteTenant mocks base method.
func (m *MockExtendedQuobyteApi) DeleteTenant(arg0 *quobyte.DeleteTenantRequest) (*quobyte.DeleteTenantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTenant", arg0)
	ret0, _ := ret[0].(*quobyte.DeleteTenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTenant indicates an expected call of DeleteTenant.
func (mr *MockExtendedQuobyteApiMockRecorder) DeleteTenant(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTenant", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeleteTenant), arg0)
}

// DeleteUser mocks base method.
func (m *MockExtendedQuobyteApi) DeleteUser(arg0 *quobyte.DeleteUserRequest) (*quobyte.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*quobyte.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockExtendedQuobyteApiMockRecorder) DeleteUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeleteUser), arg0)
}

// DeleteVolume mocks base method.
func (m *MockExtendedQuobyteApi) DeleteVolume(arg0 *quobyte.DeleteVolumeRequest) (*quobyte.DeleteVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", arg0)
	ret0, _ := ret[0].(*quobyte.DeleteVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockExtendedQuobyteApiMockRecorder) DeleteVolume(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeleteVolume), arg0)
}

// DeleteVolumeByName mocks base method.
func (m *MockExtendedQuobyteApi) DeleteVolumeByName(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeByName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeByName indicates an expected call of DeleteVolumeByName.
func (mr *MockExtendedQuobyteApiMockRecorder) DeleteVolumeByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeByName", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeleteVolumeByName), arg0, arg1)
}

// DeleteVolumeByResolvingNamesToUUID mocks base method.
func (m *MockExtendedQuobyteApi) DeleteVolumeByResolvingNamesToUUID(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeByResolvingNamesToUUID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeByResolvingNamesToUUID indicates an expected call of DeleteVolumeByResolvingNamesToUUID.
func (mr *MockExtendedQuobyteApiMockRecorder) DeleteVolumeByResolvingNamesToUUID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeByResolvingNamesToUUID", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeleteVolumeByResolvingNamesToUUID), arg0, arg1)
}

// DeregisterService mocks base method.
func (m *MockExtendedQuobyteApi) DeregisterService(arg0 *quobyte.DeregisterServiceRequest) (*quobyte.DeregisterServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterService", arg0)
	ret0, _ := ret[0].(*quobyte.DeregisterServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterService indicates an expected call of DeregisterService.
func (mr *MockExtendedQuobyteApiMockRecorder) DeregisterService(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterService", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DeregisterService), arg0)
}

// DisconnectMirroredVolume mocks base method.
func (m *MockExtendedQuobyteApi) DisconnectMirroredVolume(arg0 *quobyte.DisconnectMirroredVolumeRequest) (*quobyte.DisconnectMirroredVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectMirroredVolume", arg0)
	ret0, _ := ret[0].(*quobyte.DisconnectMirroredVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectMirroredVolume indicates an expected call of DisconnectMirroredVolume.
func (mr *MockExtendedQuobyteApiMockRecorder) DisconnectMirroredVolume(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectMirroredVolume", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DisconnectMirroredVolume), arg0)
}

// DumpEffectivePolicyRules mocks base method.
func (m *MockExtendedQuobyteApi) DumpEffectivePolicyRules(arg0 *quobyte.DumpEffectivePolicyRulesRequest) (*quobyte.DumpEffectivePolicyRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpEffectivePolicyRules", arg0)
	ret0, _ := ret[0].(*quobyte.DumpEffectivePolicyRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpEffectivePolicyRules indicates an expected call of DumpEffectivePolicyRules.
func (mr *MockExtendedQuobyteApiMockRecorder) DumpEffectivePolicyRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpEffectivePolicyRules", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DumpEffectivePolicyRules), arg0)
}

// DumpPolicyPresets mocks base method.
func (m *MockExtendedQuobyteApi) DumpPolicyPresets(arg0 *quobyte.DumpPolicyPresetsRequest) (*quobyte.DumpPolicyPresetsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpPolicyPresets", arg0)
	ret0, _ := ret[0].(*quobyte.DumpPolicyPresetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpPolicyPresets indicates an expected call of DumpPolicyPresets.
func (mr *MockExtendedQuobyteApiMockRecorder) DumpPolicyPresets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpPolicyPresets", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).DumpPolicyPresets), arg0)
}

// EraseSnapshot mocks base method.
func (m *MockExtendedQuobyteApi) EraseSnapshot(arg0 *quobyte.EraseSnapshotRequest) (*quobyte.EraseSnapshotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EraseSnapshot", arg0)
	ret0, _ := ret[0].(*quobyte.EraseSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EraseSnapshot indicates an expected call of EraseSnapshot.
func (mr *MockExtendedQuobyteApiMockRecorder) EraseSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EraseSnapshot", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).EraseSnapshot), arg0)
}

// EraseVolume mocks base method.
func (m *MockExtendedQuobyteApi) EraseVolume(arg0 *quobyte.EraseVolumeRequest) (*quobyte.EraseVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EraseVolume", arg0)
	ret0, _ := ret[0].(*quobyte.EraseVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EraseVolume indicates an expected call of EraseVolume.
func (mr *MockExtendedQuobyteApiMockRecorder) EraseVolume(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EraseVolume", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).EraseVolume), arg0)
}

// EraseVolumeByResolvingNamesToUUID mocks base method.
func (m *MockExtendedQuobyteApi) EraseVolumeByResolvingNamesToUUID(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EraseVolumeByResolvingNamesToUUID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EraseVolumeByResolvingNamesToUUID indicates an expected call of EraseVolumeByResolvingNamesToUUID.
func (mr *MockExtendedQuobyteApiMockRecorder) EraseVolumeByResolvingNamesToUUID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EraseVolumeByResolvingNamesToUUID", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).EraseVolumeByResolvingNamesToUUID), arg0, arg1, arg2)
}

// EraseVolumeByResolvingNamesToUUID_2X mocks base method.
func (m *MockExtendedQuobyteApi) EraseVolumeByResolvingNamesToUUID_2X(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EraseVolumeByResolvingNamesToUUID_2X", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EraseVolumeByResolvingNamesToUUID_2X indicates an expected call of EraseVolumeByResolvingNamesToUUID_2X.
func (mr *MockExtendedQuobyteApiMockRecorder) EraseVolumeByResolvingNamesToUUID_2X(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EraseVolumeByResolvingNamesToUUID_2X", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).EraseVolumeByResolvingNamesToUUID_2X), arg0, arg1)
}

// ExportCertificate mocks base method.
func (m *MockExtendedQuobyteApi) ExportCertificate(arg0 *quobyte.ExportCertificateRequest) (*quobyte.ExportCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportCertificate", arg0)
	ret0, _ := ret[0].(*quobyte.ExportCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportCertificate indicates an expected call of ExportCertificate.
func (mr *MockExtendedQuobyteApiMockRecorder) ExportCertificate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportCertificate", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ExportCertificate), arg0)
}

// ExportConfiguration mocks base method.
func (m *MockExtendedQuobyteApi) ExportConfiguration(arg0 *quobyte.ExportConfigurationRequest) (*quobyte.ExportConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportConfiguration", arg0)
	ret0, _ := ret[0].(*quobyte.ExportConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportConfiguration indicates an expected call of ExportConfiguration.
func (mr *MockExtendedQuobyteApiMockRecorder) ExportConfiguration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportConfiguration", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ExportConfiguration), arg0)
}

// ExportPolicyRules mocks base method.
func (m *MockExtendedQuobyteApi) ExportPolicyRules(arg0 *quobyte.ExportPolicyRulesRequest) (*quobyte.ExportPolicyRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyRules", arg0)
	ret0, _ := ret[0].(*quobyte.ExportPolicyRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyRules indicates an expected call of ExportPolicyRules.
func (mr *MockExtendedQuobyteApiMockRecorder) ExportPolicyRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyRules", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ExportPolicyRules), arg0)
}

// ExportVolume mocks base method.
func (m *MockExtendedQuobyteApi) ExportVolume(arg0 *quobyte.ExportVolumeRequest) (*quobyte.ExportVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportVolume", arg0)
	ret0, _ := ret[0].(*quobyte.ExportVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportVolume indicates an expected call of ExportVolume.
func (mr *MockExtendedQuobyteApiMockRecorder) ExportVolume(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportVolume", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ExportVolume), arg0)
}

// FilterPolicyRules mocks base method.
func (m *MockExtendedQuobyteApi) FilterPolicyRules(arg0 *quobyte.FilterPolicyRulesRequest) (*quobyte.FilterPolicyRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterPolicyRules", arg0)
	ret0, _ := ret[0].(*quobyte.FilterPolicyRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterPolicyRules indicates an expected call of FilterPolicyRules.
func (mr *MockExtendedQuobyteApiMockRecorder) FilterPolicyRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterPolicyRules", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).FilterPolicyRules), arg0)
}

// GenerateAsyncSupportDump mocks base method.
func (m *MockExtendedQuobyteApi) GenerateAsyncSupportDump(arg0 *quobyte.GenerateAsyncSupportDumpRequest) (*quobyte.GenerateAsyncSupportDumpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAsyncSupportDump", arg0)
	ret0, _ := ret[0].(*quobyte.GenerateAsyncSupportDumpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAsyncSupportDump indicates an expected call of GenerateAsyncSupportDump.
func (mr *MockExtendedQuobyteApiMockRecorder) GenerateAsyncSupportDump(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAsyncSupportDump", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GenerateAsyncSupportDump), arg0)
}

// GetAPIRetryPolicy mocks base method.
func (m *MockExtendedQuobyteApi) GetAPIRetryPolicy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIRetryPolicy")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAPIRetryPolicy indicates an expected call of GetAPIRetryPolicy.
func (mr *MockExtendedQuobyteApiMockRecorder) GetAPIRetryPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIRetryPolicy", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetAPIRetryPolicy))
}

// GetAccounting mocks base method.
func (m *MockExtendedQuobyteApi) GetAccounting(arg0 *quobyte.GetAccountingRequest) (*quobyte.GetAccountingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounting", arg0)
	ret0, _ := ret[0].(*quobyte.GetAccountingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounting indicates an expected call of GetAccounting.
func (mr *MockExtendedQuobyteApiMockRecorder) GetAccounting(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounting", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetAccounting), arg0)
}

// GetAddKeySlotData mocks base method.
func (m *MockExtendedQuobyteApi) GetAddKeySlotData(arg0 *quobyte.GetAddKeySlotDataRequest) (*quobyte.GetAddKeySlotDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddKeySlotData", arg0)
	ret0, _ := ret[0].(*quobyte.GetAddKeySlotDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddKeySlotData indicates an expected call of GetAddKeySlotData.
func (mr *MockExtendedQuobyteApiMockRecorder) GetAddKeySlotData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddKeySlotData", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetAddKeySlotData), arg0)
}

// GetAnalyzeReports mocks base method.
func (m *MockExtendedQuobyteApi) GetAnalyzeReports(arg0 *quobyte.GetAnalyzeReportsRequest) (*quobyte.GetAnalyzeReportsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalyzeReports", arg0)
	ret0, _ := ret[0].(*quobyte.GetAnalyzeReportsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalyzeReports indicates an expected call of GetAnalyzeReports.
func (mr *MockExtendedQuobyteApiMockRecorder) GetAnalyzeReports(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalyzeReports", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetAnalyzeReports), arg0)
}

// GetAuditLog mocks base method.
func (m *MockExtendedQuobyteApi) GetAuditLog(arg0 *quobyte.GetAuditLogRequest) (*quobyte.GetAuditLogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLog", arg0)
	ret0, _ := ret[0].(*quobyte.GetAuditLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLog indicates an expected call of GetAuditLog.
func (mr *MockExtendedQuobyteApiMockRecorder) GetAuditLog(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLog", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetAuditLog), arg0)
}

// GetCertificateSubject mocks base method.
func (m *MockExtendedQuobyteApi) GetCertificateSubject(arg0 *quobyte.GetCertificateSubjectRequest) (*quobyte.GetCertificateSubjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateSubject", arg0)
	ret0, _ := ret[0].(*quobyte.GetCertificateSubjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateSubject indicates an expected call of GetCertificateSubject.
func (mr *MockExtendedQuobyteApiMockRecorder) GetCertificateSubject(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateSubject", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetCertificateSubject), arg0)
}

// GetClientList mocks base method.
func (m *MockExtendedQuobyteApi) GetClientList(arg0 *quobyte.GetClientListRequest) (*quobyte.GetClientListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientList", arg0)
	ret0, _ := ret[0].(*quobyte.GetClientListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientList indicates an expected call of GetClientList.
func (mr *MockExtendedQuobyteApiMockRecorder) GetClientList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientList", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetClientList), arg0)
}

// GetConfiguration mocks base method.
func (m *MockExtendedQuobyteApi) GetConfiguration(arg0 *quobyte.GetConfigurationRequest) (*quobyte.GetConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguration", arg0)
	ret0, _ := ret[0].(*quobyte.GetConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration.
func (mr *MockExtendedQuobyteApiMockRecorder) GetConfiguration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetConfiguration), arg0)
}

// GetDefaultKeyStoreSlotParams mocks base method.
func (m *MockExtendedQuobyteApi) GetDefaultKeyStoreSlotParams(arg0 *quobyte.GetDefaultKeyStoreSlotParamsRequest) (*quobyte.GetDefaultKeyStoreSlotParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultKeyStoreSlotParams", arg0)
	ret0, _ := ret[0].(*quobyte.GetDefaultKeyStoreSlotParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultKeyStoreSlotParams indicates an expected call of GetDefaultKeyStoreSlotParams.
func (mr *MockExtendedQuobyteApiMockRecorder) GetDefaultKeyStoreSlotParams(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultKeyStoreSlotParams", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetDefaultKeyStoreSlotParams), arg0)
}

// GetDeviceGroups mocks base method.
func (m *MockExtendedQuobyteApi) GetDeviceGroups(arg0 *quobyte.GetDeviceGroupsRequest) (*quobyte.GetDeviceGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceGroups", arg0)
	ret0, _ := ret[0].(*quobyte.GetDeviceGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceGroups indicates an expected call of GetDeviceGroups.
func (mr *MockExtendedQuobyteApiMockRecorder) GetDeviceGroups(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceGroups", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetDeviceGroups), arg0)
}

// GetDeviceIds mocks base method.
func (m *MockExtendedQuobyteApi) GetDeviceIds(arg0 *quobyte.GetDeviceIdsRequest) (*quobyte.GetDeviceIdsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceIds", arg0)
	ret0, _ := ret[0].(*quobyte.GetDeviceIdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceIds indicates an expected call of GetDeviceIds.
func (mr *MockExtendedQuobyteApiMockRecorder) GetDeviceIds(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceIds", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetDeviceIds), arg0)
}

// GetDeviceList mocks base method.
func (m *MockExtendedQuobyteApi) GetDeviceList(arg0 *quobyte.GetDeviceListRequest) (*quobyte.GetDeviceListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceList", arg0)
	ret0, _ := ret[0].(*quobyte.GetDeviceListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceList indicates an expected call of GetDeviceList.
func (mr *MockExtendedQuobyteApiMockRecorder) GetDeviceList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceList", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetDeviceList), arg0)
}

// GetDeviceNetworkEndpoints mocks base method.
func (m *MockExtendedQuobyteApi) GetDeviceNetworkEndpoints(arg0 *quobyte.GetDeviceNetworkEndpointsRequest) (*quobyte.GetDeviceNetworkEndpointsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceNetworkEndpoints", arg0)
	ret0, _ := ret[0].(*quobyte.GetDeviceNetworkEndpointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceNetworkEndpoints indicates an expected call of GetDeviceNetworkEndpoints.
func (mr *MockExtendedQuobyteApiMockRecorder) GetDeviceNetworkEndpoints(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceNetworkEndpoints", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetDeviceNetworkEndpoints), arg0)
}

// GetDeviceTags mocks base method.
func (m *MockExtendedQuobyteApi) GetDeviceTags(arg0 *quobyte.GetDeviceTagsRequest) (*quobyte.GetDeviceTagsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceTags", arg0)
	ret0, _ := ret[0].(*quobyte.GetDeviceTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceTags indicates an expected call of GetDeviceTags.
func (mr *MockExtendedQuobyteApiMockRecorder) GetDeviceTags(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceTags", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetDeviceTags), arg0)
}

// GetEffectiveVolumeConfiguration mocks base method.
func (m *MockExtendedQuobyteApi) GetEffectiveVolumeConfiguration(arg0 *quobyte.GetEffectiveVolumeConfigurationRequest) (*quobyte.GetEffectiveVolumeConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectiveVolumeConfiguration", arg0)
	ret0, _ := ret[0].(*quobyte.GetEffectiveVolumeConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEffectiveVolumeConfiguration indicates an expected call of GetEffectiveVolumeConfiguration.
func (mr *MockExtendedQuobyteApiMockRecorder) GetEffectiveVolumeConfiguration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectiveVolumeConfiguration", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetEffectiveVolumeConfiguration), arg0)
}

// GetEncryptStatus mocks base method.
func (m *MockExtendedQuobyteApi) GetEncryptStatus(arg0 *quobyte.GetEncryptStatusRequest) (*quobyte.GetEncryptStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptStatus", arg0)
	ret0, _ := ret[0].(*quobyte.GetEncryptStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptStatus indicates an expected call of GetEncryptStatus.
func (mr *MockExtendedQuobyteApiMockRecorder) GetEncryptStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptStatus", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetEncryptStatus), arg0)
}

// GetEncryptedVolumeKey mocks base method.
func (m *MockExtendedQuobyteApi) GetEncryptedVolumeKey(arg0 *quobyte.GetEncryptedVolumeKeyRequest) (*quobyte.GetEncryptedVolumeKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptedVolumeKey", arg0)
	ret0, _ := ret[0].(*quobyte.GetEncryptedVolumeKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptedVolumeKey indicates an expected call of GetEncryptedVolumeKey.
func (mr *MockExtendedQuobyteApiMockRecorder) GetEncryptedVolumeKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptedVolumeKey", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetEncryptedVolumeKey), arg0)
}

// GetFileMetadataDump mocks base method.
func (m *MockExtendedQuobyteApi) GetFileMetadataDump(arg0 *quobyte.GetFileMetadataDumpRequest) (*quobyte.GetFileMetadataDumpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileMetadataDump", arg0)
	ret0, _ := ret[0].(*quobyte.GetFileMetadataDumpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileMetadataDump indicates an expected call of GetFileMetadataDump.
func (mr *MockExtendedQuobyteApiMockRecorder) GetFileMetadataDump(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMetadataDump", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetFileMetadataDump), arg0)
}

// GetFiringRules mocks base method.
func (m *MockExtendedQuobyteApi) GetFiringRules(arg0 *quobyte.GetFiringRulesRequest) (*quobyte.GetFiringRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiringRules", arg0)
	ret0, _ := ret[0].(*quobyte.GetFiringRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiringRules indicates an expected call of GetFiringRules.
func (mr *MockExtendedQuobyteApiMockRecorder) GetFiringRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiringRules", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetFiringRules), arg0)
}

// GetHealthManagerStatus mocks base method.
func (m *MockExtendedQuobyteApi) GetHealthManagerStatus(arg0 *quobyte.GetHealthManagerStatusRequest) (*quobyte.GetHealthManagerStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthManagerStatus", arg0)
	ret0, _ := ret[0].(*quobyte.GetHealthManagerStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthManagerStatus indicates an expected call of GetHealthManagerStatus.
func (mr *MockExtendedQuobyteApiMockRecorder) GetHealthManagerStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthManagerStatus", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetHealthManagerStatus), arg0)
}

// GetInformation mocks base method.
func (m *MockExtendedQuobyteApi) GetInformation(arg0 *quobyte.GetInformationRequest) (*quobyte.GetInformationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInformation", arg0)
	ret0, _ := ret[0].(*quobyte.GetInformationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInformation indicates an expected call of GetInformation.
func (mr *MockExtendedQuobyteApiMockRecorder) GetInformation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInformation", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetInformation), arg0)
}

// GetKeyStoreSlotWithoutHash mocks base method.
func (m *MockExtendedQuobyteApi) GetKeyStoreSlotWithoutHash(arg0 *quobyte.GetKeyStoreSlotWithoutHashRequest) (*quobyte.GetKeyStoreSlotWithoutHashResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyStoreSlotWithoutHash", arg0)
	ret0, _ := ret[0].(*quobyte.GetKeyStoreSlotWithoutHashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyStoreSlotWithoutHash indicates an expected call of GetKeyStoreSlotWithoutHash.
func (mr *MockExtendedQuobyteApiMockRecorder) GetKeyStoreSlotWithoutHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyStoreSlotWithoutHash", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetKeyStoreSlotWithoutHash), arg0)
}

// GetLabels mocks base method.
func (m *MockExtendedQuobyteApi) GetLabels(arg0 *quobyte.GetLabelsRequest) (*quobyte.GetLabelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels", arg0)
	ret0, _ := ret[0].(*quobyte.GetLabelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockExtendedQuobyteApiMockRecorder) GetLabels(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetLabels), arg0)
}

// GetLatestEvent mocks base method.
func (m *MockExtendedQuobyteApi) GetLatestEvent(arg0 *quobyte.GetLatestEventRequest) (*quobyte.GetLatestEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestEvent", arg0)
	ret0, _ := ret[0].(*quobyte.GetLatestEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestEvent indicates an expected call of GetLatestEvent.
func (mr *MockExtendedQuobyteApiMockRecorder) GetLatestEvent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestEvent", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetLatestEvent), arg0)
}

// GetLicense mocks base method.
func (m *MockExtendedQuobyteApi) GetLicense(arg0 *quobyte.GetLicenseRequest) (*quobyte.GetLicenseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicense", arg0)
	ret0, _ := ret[0].(*quobyte.GetLicenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicense indicates an expected call of GetLicense.
func (mr *MockExtendedQuobyteApiMockRecorder) GetLicense(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicense", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetLicense), arg0)
}

// GetMasterKeystoreSlots mocks base method.
func (m *MockExtendedQuobyteApi) GetMasterKeystoreSlots(arg0 *quobyte.GetMasterKeystoreSlotsRequest) (*quobyte.GetMasterKeystoreSlotsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterKeystoreSlots", arg0)
	ret0, _ := ret[0].(*quobyte.GetMasterKeystoreSlotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterKeystoreSlots indicates an expected call of GetMasterKeystoreSlots.
func (mr *MockExtendedQuobyteApiMockRecorder) GetMasterKeystoreSlots(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterKeystoreSlots", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetMasterKeystoreSlots), arg0)
}

// GetNetworkTestResult mocks base method.
func (m *MockExtendedQuobyteApi) GetNetworkTestResult(arg0 *quobyte.GetNetworkTestResultRequest) (*quobyte.GetNetworkTestResultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTestResult", arg0)
	ret0, _ := ret[0].(*quobyte.GetNetworkTestResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTestResult indicates an expected call of GetNetworkTestResult.
func (mr *MockExtendedQuobyteApiMockRecorder) GetNetworkTestResult(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTestResult", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetNetworkTestResult), arg0)
}

// GetNotificationRules mocks base method.
func (m *MockExtendedQuobyteApi) GetNotificationRules(arg0 *quobyte.GetNotificationRulesRequest) (*quobyte.GetNotificationRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationRules", arg0)
	ret0, _ := ret[0].(*quobyte.GetNotificationRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationRules indicates an expected call of GetNotificationRules.
func (mr *MockExtendedQuobyteApiMockRecorder) GetNotificationRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationRules", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetNotificationRules), arg0)
}

// GetPolicyPresets mocks base method.
func (m *MockExtendedQuobyteApi) GetPolicyPresets(arg0 *quobyte.GetPolicyPresetsRequest) (*quobyte.GetPolicyPresetsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyPresets", arg0)
	ret0, _ := ret[0].(*quobyte.GetPolicyPresetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyPresets indicates an expected call of GetPolicyPresets.
func (mr *MockExtendedQuobyteApiMockRecorder) GetPolicyPresets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyPresets", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetPolicyPresets), arg0)
}

// GetPolicyRuleSets mocks base method.
func (m *MockExtendedQuobyteApi) GetPolicyRuleSets(arg0 *quobyte.GetPolicyRuleSetsRequest) (*quobyte.GetPolicyRuleSetsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyRuleSets", arg0)
	ret0, _ := ret[0].(*quobyte.GetPolicyRuleSetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyRuleSets indicates an expected call of GetPolicyRuleSets.
func (mr *MockExtendedQuobyteApiMockRecorder) GetPolicyRuleSets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyRuleSets", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetPolicyRuleSets), arg0)
}

// GetPolicyRules mocks base method.
func (m *MockExtendedQuobyteApi) GetPolicyRules(arg0 *quobyte.GetPolicyRulesRequest) (*quobyte.GetPolicyRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyRules", arg0)
	ret0, _ := ret[0].(*quobyte.GetPolicyRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyRules indicates an expected call of GetPolicyRules.
func (mr *MockExtendedQuobyteApiMockRecorder) GetPolicyRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyRules", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetPolicyRules), arg0)
}

// GetQueryProgress mocks base method.
func (m *MockExtendedQuobyteApi) GetQueryProgress(arg0 *quobyte.GetQueryProgressRequest) (*quobyte.GetQueryProgressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryProgress", arg0)
	ret0, _ := ret[0].(*quobyte.GetQueryProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryProgress indicates an expected call of GetQueryProgress.
func (mr *MockExtendedQuobyteApiMockRecorder) GetQueryProgress(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryProgress", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetQueryProgress), arg0)
}

// GetQuota mocks base method.
func (m *MockExtendedQuobyteApi) GetQuota(arg0 *quobyte.GetQuotaRequest) (*quobyte.GetQuotaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", arg0)
	ret0, _ := ret[0].(*quobyte.GetQuotaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuota indicates an expected call of GetQuota.
func (mr *MockExtendedQuobyteApiMockRecorder) GetQuota(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetQuota), arg0)
}

// GetRules mocks base method.
func (m *MockExtendedQuobyteApi) GetRules(arg0 *quobyte.GetRulesRequest) (*quobyte.GetRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRules", arg0)
	ret0, _ := ret[0].(*quobyte.GetRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRules indicates an expected call of GetRules.
func (mr *MockExtendedQuobyteApiMockRecorder) GetRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRules", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetRules), arg0)
}

// GetServiceDump mocks base method.
func (m *MockExtendedQuobyteApi) GetServiceDump(arg0 *quobyte.GetServiceDumpRequest) (*quobyte.GetServiceDumpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceDump", arg0)
	ret0, _ := ret[0].(*quobyte.GetServiceDumpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceDump indicates an expected call of GetServiceDump.
func (mr *MockExtendedQuobyteApiMockRecorder) GetServiceDump(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceDump", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetServiceDump), arg0)
}

// GetServices mocks base method.
func (m *MockExtendedQuobyteApi) GetServices(arg0 *quobyte.GetServicesRequest) (*quobyte.GetServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices", arg0)
	ret0, _ := ret[0].(*quobyte.GetServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServices indicates an expected call of GetServices.
func (mr *MockExtendedQuobyteApiMockRecorder) GetServices(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetServices), arg0)
}

// GetSupportDump mocks base method.
func (m *MockExtendedQuobyteApi) GetSupportDump(arg0 *quobyte.GetSupportDumpRequest) (*quobyte.GetSupportDumpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportDump", arg0)
	ret0, _ := ret[0].(*quobyte.GetSupportDumpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportDump indicates an expected call of GetSupportDump.
func (mr *MockExtendedQuobyteApiMockRecorder) GetSupportDump(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportDump", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetSupportDump), arg0)
}

// GetSupportDumpStatus mocks base method.
func (m *MockExtendedQuobyteApi) GetSupportDumpStatus(arg0 *quobyte.GetSupportDumpStatusRequest) (*quobyte.GetSupportDumpStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportDumpStatus", arg0)
	ret0, _ := ret[0].(*quobyte.GetSupportDumpStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportDumpStatus indicates an expected call of GetSupportDumpStatus.
func (mr *MockExtendedQuobyteApiMockRecorder) GetSupportDumpStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportDumpStatus", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetSupportDumpStatus), arg0)
}

// GetSystemStatistics mocks base method.
func (m *MockExtendedQuobyteApi) GetSystemStatistics(arg0 *quobyte.GetSystemStatisticsRequest) (*quobyte.GetSystemStatisticsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemStatistics", arg0)
	ret0, _ := ret[0].(*quobyte.GetSystemStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemStatistics indicates an expected call of GetSystemStatistics.
func (mr *MockExtendedQuobyteApiMockRecorder) GetSystemStatistics(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemStatistics", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetSystemStatistics), arg0)
}

// GetTaskList mocks base method.
func (m *MockExtendedQuobyteApi) GetTaskList(arg0 *quobyte.GetTaskListRequest) (*quobyte.GetTaskListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskList", arg0)
	ret0, _ := ret[0].(*quobyte.GetTaskListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskList indicates an expected call of GetTaskList.
func (mr *MockExtendedQuobyteApiMockRecorder) GetTaskList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskList", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetTaskList), arg0)
}

// GetTenant mocks base method.
func (m *MockExtendedQuobyteApi) GetTenant(arg0 *quobyte.GetTenantRequest) (*quobyte.GetTenantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenant", arg0)
	ret0, _ := ret[0].(*quobyte.GetTenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenant indicates an expected call of GetTenant.
func (mr *MockExtendedQuobyteApiMockRecorder) GetTenant(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenant", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetTenant), arg0)
}

// GetTenantMap mocks base method.
func (m *MockExtendedQuobyteApi) GetTenantMap() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantMap")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantMap indicates an expected call of GetTenantMap.
func (mr *MockExtendedQuobyteApiMockRecorder) GetTenantMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantMap", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetTenantMap))
}

// GetTenantUUID mocks base method.
func (m *MockExtendedQuobyteApi) GetTenantUUID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantUUID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantUUID indicates an expected call of GetTenantUUID.
func (mr *MockExtendedQuobyteApiMockRecorder) GetTenantUUID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantUUID", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetTenantUUID), arg0)
}

// GetTopCapacityConsumer mocks base method.
func (m *MockExtendedQuobyteApi) GetTopCapacityConsumer(arg0 *quobyte.GetTopCapacityConsumerRequest) (*quobyte.GetTopCapacityConsumerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopCapacityConsumer", arg0)
	ret0, _ := ret[0].(*quobyte.GetTopCapacityConsumerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopCapacityConsumer indicates an expected call of GetTopCapacityConsumer.
func (mr *MockExtendedQuobyteApiMockRecorder) GetTopCapacityConsumer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopCapacityConsumer", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetTopCapacityConsumer), arg0)
}

// GetUnformattedDevices mocks base method.
func (m *MockExtendedQuobyteApi) GetUnformattedDevices(arg0 *quobyte.GetUnformattedDevicesRequest) (*quobyte.GetUnformattedDevicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnformattedDevices", arg0)
	ret0, _ := ret[0].(*quobyte.GetUnformattedDevicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnformattedDevices indicates an expected call of GetUnformattedDevices.
func (mr *MockExtendedQuobyteApiMockRecorder) GetUnformattedDevices(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnformattedDevices", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetUnformattedDevices), arg0)
}

// GetUsers mocks base method.
func (m *MockExtendedQuobyteApi) GetUsers(arg0 *quobyte.GetUsersRequest) (*quobyte.GetUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0)
	ret0, _ := ret[0].(*quobyte.GetUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockExtendedQuobyteApiMockRecorder) GetUsers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetUsers), arg0)
}

// GetVolumeList mocks base method.
func (m *MockExtendedQuobyteApi) GetVolumeList(arg0 *quobyte.GetVolumeListRequest) (*quobyte.GetVolumeListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeList", arg0)
	ret0, _ := ret[0].(*quobyte.GetVolumeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeList indicates an expected call of GetVolumeList.
func (mr *MockExtendedQuobyteApiMockRecorder) GetVolumeList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeList", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetVolumeList), arg0)
}

// GetVolumeUUID mocks base method.
func (m *MockExtendedQuobyteApi) GetVolumeUUID(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeUUID indicates an expected call of GetVolumeUUID.
func (mr *MockExtendedQuobyteApiMockRecorder) GetVolumeUUID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeUUID", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).GetVolumeUUID), arg0, arg1)
}

// ImportAccessKeys mocks base method.
func (m *MockExtendedQuobyteApi) ImportAccessKeys(arg0 *quobyte.ImportAccessKeysRequest) (*quobyte.ImportAccessKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportAccessKeys", arg0)
	ret0, _ := ret[0].(*quobyte.ImportAccessKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportAccessKeys indicates an expected call of ImportAccessKeys.
func (mr *MockExtendedQuobyteApiMockRecorder) ImportAccessKeys(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAccessKeys", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ImportAccessKeys), arg0)
}

// ImportConfiguration mocks base method.
func (m *MockExtendedQuobyteApi) ImportConfiguration(arg0 *quobyte.ImportConfigurationRequest) (*quobyte.ImportConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportConfiguration", arg0)
	ret0, _ := ret[0].(*quobyte.ImportConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportConfiguration indicates an expected call of ImportConfiguration.
func (mr *MockExtendedQuobyteApiMockRecorder) ImportConfiguration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportConfiguration", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ImportConfiguration), arg0)
}

// ImportPolicyRules mocks base method.
func (m *MockExtendedQuobyteApi) ImportPolicyRules(arg0 *quobyte.ImportPolicyRulesRequest) (*quobyte.ImportPolicyRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportPolicyRules", arg0)
	ret0, _ := ret[0].(*quobyte.ImportPolicyRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportPolicyRules indicates an expected call of ImportPolicyRules.
func (mr *MockExtendedQuobyteApiMockRecorder) ImportPolicyRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportPolicyRules", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ImportPolicyRules), arg0)
}

// ListCa mocks base method.
func (m *MockExtendedQuobyteApi) ListCa(arg0 *quobyte.ListCaRequest) (*quobyte.ListCaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCa", arg0)
	ret0, _ := ret[0].(*quobyte.ListCaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCa indicates an expected call of ListCa.
func (mr *MockExtendedQuobyteApiMockRecorder) ListCa(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCa", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ListCa), arg0)
}

// ListCertificates mocks base method.
func (m *MockExtendedQuobyteApi) ListCertificates(arg0 *quobyte.ListCertificatesRequest) (*quobyte.ListCertificatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificates", arg0)
	ret0, _ := ret[0].(*quobyte.ListCertificatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificates indicates an expected call of ListCertificates.
func (mr *MockExtendedQuobyteApiMockRecorder) ListCertificates(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificates", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ListCertificates), arg0)
}

// ListCsr mocks base method.
func (m *MockExtendedQuobyteApi) ListCsr(arg0 *quobyte.ListCsrRequest) (*quobyte.ListCsrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCsr", arg0)
	ret0, _ := ret[0].(*quobyte.ListCsrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCsr indicates an expected call of ListCsr.
func (mr *MockExtendedQuobyteApiMockRecorder) ListCsr(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCsr", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ListCsr), arg0)
}

// ListRegistryReplicas mocks base method.
func (m *MockExtendedQuobyteApi) ListRegistryReplicas(arg0 *quobyte.ListRegistryReplicasRequest) (*quobyte.ListRegistryReplicasResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegistryReplicas", arg0)
	ret0, _ := ret[0].(*quobyte.ListRegistryReplicasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegistryReplicas indicates an expected call of ListRegistryReplicas.
func (mr *MockExtendedQuobyteApiMockRecorder) ListRegistryReplicas(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistryReplicas", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ListRegistryReplicas), arg0)
}

// ListSnapshots mocks base method.
func (m *MockExtendedQuobyteApi) ListSnapshots(arg0 *quobyte.ListSnapshotsRequest) (*quobyte.ListSnapshotsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", arg0)
	ret0, _ := ret[0].(*quobyte.ListSnapshotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots.
func (mr *MockExtendedQuobyteApiMockRecorder) ListSnapshots(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ListSnapshots), arg0)
}

// MakeDevice mocks base method.
func (m *MockExtendedQuobyteApi) MakeDevice(arg0 *quobyte.MakeDeviceRequest) (*quobyte.MakeDeviceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDevice", arg0)
	ret0, _ := ret[0].(*quobyte.MakeDeviceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeDevice indicates an expected call of MakeDevice.
func (mr *MockExtendedQuobyteApiMockRecorder) MakeDevice(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDevice", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).MakeDevice), arg0)
}

// PublishBucketVolume mocks base method.
func (m *MockExtendedQuobyteApi) PublishBucketVolume(arg0 *quobyte.PublishBucketVolumeRequest) (*quobyte.PublishBucketVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBucketVolume", arg0)
	ret0, _ := ret[0].(*quobyte.PublishBucketVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishBucketVolume indicates an expected call of PublishBucketVolume.
func (mr *MockExtendedQuobyteApiMockRecorder) PublishBucketVolume(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBucketVolume", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).PublishBucketVolume), arg0)
}

// QueryFiles mocks base method.
func (m *MockExtendedQuobyteApi) QueryFiles(arg0 *quobyte.QueryFilesRequest) (*quobyte.QueryFilesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFiles", arg0)
	ret0, _ := ret[0].(*quobyte.QueryFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFiles indicates an expected call of QueryFiles.
func (mr *MockExtendedQuobyteApiMockRecorder) QueryFiles(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFiles", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).QueryFiles), arg0)
}

// RegenerateDatabase mocks base method.
func (m *MockExtendedQuobyteApi) RegenerateDatabase(arg0 *quobyte.RegenerateDatabaseRequest) (*quobyte.RegenerateDatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegenerateDatabase", arg0)
	ret0, _ := ret[0].(*quobyte.RegenerateDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegenerateDatabase indicates an expected call of RegenerateDatabase.
func (mr *MockExtendedQuobyteApiMockRecorder) RegenerateDatabase(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateDatabase", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).RegenerateDatabase), arg0)
}

// RemoveKeystoreSlot mocks base method.
func (m *MockExtendedQuobyteApi) RemoveKeystoreSlot(arg0 *quobyte.RemoveKeystoreSlotRequest) (*quobyte.RemoveKeystoreSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKeystoreSlot", arg0)
	ret0, _ := ret[0].(*quobyte.RemoveKeystoreSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveKeystoreSlot indicates an expected call of RemoveKeystoreSlot.
func (mr *MockExtendedQuobyteApiMockRecorder) RemoveKeystoreSlot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKeystoreSlot", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).RemoveKeystoreSlot), arg0)
}

// RemoveMasterKeystoreSlot mocks base method.
func (m *MockExtendedQuobyteApi) RemoveMasterKeystoreSlot(arg0 *quobyte.RemoveMasterKeystoreSlotRequest) (*quobyte.RemoveMasterKeystoreSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMasterKeystoreSlot", arg0)
	ret0, _ := ret[0].(*quobyte.RemoveMasterKeystoreSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMasterKeystoreSlot indicates an expected call of RemoveMasterKeystoreSlot.
func (mr *MockExtendedQuobyteApiMockRecorder) RemoveMasterKeystoreSlot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMasterKeystoreSlot", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).RemoveMasterKeystoreSlot), arg0)
}

// RemoveRegistryReplica mocks base method.
func (m *MockExtendedQuobyteApi) RemoveRegistryReplica(arg0 *quobyte.RemoveRegistryReplicaRequest) (*quobyte.RemoveRegistryReplicaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRegistryReplica", arg0)
	ret0, _ := ret[0].(*quobyte.RemoveRegistryReplicaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRegistryReplica indicates an expected call of RemoveRegistryReplica.
func (mr *MockExtendedQuobyteApiMockRecorder) RemoveRegistryReplica(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRegistryReplica", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).RemoveRegistryReplica), arg0)
}

// ResolveGlobalFileId mocks base method.
func (m *MockExtendedQuobyteApi) ResolveGlobalFileId(arg0 *quobyte.ResolveGlobalFileIdRequest) (*quobyte.ResolveGlobalFileIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveGlobalFileId", arg0)
	ret0, _ := ret[0].(*quobyte.ResolveGlobalFileIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveGlobalFileId indicates an expected call of ResolveGlobalFileId.
func (mr *MockExtendedQuobyteApiMockRecorder) ResolveGlobalFileId(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveGlobalFileId", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ResolveGlobalFileId), arg0)
}

// ResolvePolicyRuleName mocks base method.
func (m *MockExtendedQuobyteApi) ResolvePolicyRuleName(arg0 *quobyte.ResolvePolicyRuleNameRequest) (*quobyte.ResolvePolicyRuleNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolvePolicyRuleName", arg0)
	ret0, _ := ret[0].(*quobyte.ResolvePolicyRuleNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolvePolicyRuleName indicates an expected call of ResolvePolicyRuleName.
func (mr *MockExtendedQuobyteApiMockRecorder) ResolvePolicyRuleName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolvePolicyRuleName", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ResolvePolicyRuleName), arg0)
}

// ResolveTenantName mocks base method.
func (m *MockExtendedQuobyteApi) ResolveTenantName(arg0 *quobyte.ResolveTenantNameRequest) (*quobyte.ResolveTenantNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveTenantName", arg0)
	ret0, _ := ret[0].(*quobyte.ResolveTenantNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveTenantName indicates an expected call of ResolveTenantName.
func (mr *MockExtendedQuobyteApiMockRecorder) ResolveTenantName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveTenantName", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ResolveTenantName), arg0)
}

// ResolveTenantNameToUUID mocks base method.
func (m *MockExtendedQuobyteApi) ResolveTenantNameToUUID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveTenantNameToUUID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveTenantNameToUUID indicates an expected call of ResolveTenantNameToUUID.
func (mr *MockExtendedQuobyteApiMockRecorder) ResolveTenantNameToUUID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveTenantNameToUUID", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ResolveTenantNameToUUID), arg0)
}

// ResolveVolumeName mocks base method.
func (m *MockExtendedQuobyteApi) ResolveVolumeName(arg0 *quobyte.ResolveVolumeNameRequest) (*quobyte.ResolveVolumeNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveVolumeName", arg0)
	ret0, _ := ret[0].(*quobyte.ResolveVolumeNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveVolumeName indicates an expected call of ResolveVolumeName.
func (mr *MockExtendedQuobyteApiMockRecorder) ResolveVolumeName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveVolumeName", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ResolveVolumeName), arg0)
}

// ResolveVolumeNameToUUID mocks base method.
func (m *MockExtendedQuobyteApi) ResolveVolumeNameToUUID(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveVolumeNameToUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveVolumeNameToUUID indicates an expected call of ResolveVolumeNameToUUID.
func (mr *MockExtendedQuobyteApiMockRecorder) ResolveVolumeNameToUUID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveVolumeNameToUUID", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ResolveVolumeNameToUUID), arg0, arg1)
}

// ResumeTask mocks base method.
func (m *MockExtendedQuobyteApi) ResumeTask(arg0 *quobyte.ResumeTaskRequest) (*quobyte.ResumeTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeTask", arg0)
	ret0, _ := ret[0].(*quobyte.ResumeTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeTask indicates an expected call of ResumeTask.
func (mr *MockExtendedQuobyteApiMockRecorder) ResumeTask(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeTask", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).ResumeTask), arg0)
}

// RetryTask mocks base method.
func (m *MockExtendedQuobyteApi) RetryTask(arg0 *quobyte.RetryTaskRequest) (*quobyte.RetryTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryTask", arg0)
	ret0, _ := ret[0].(*quobyte.RetryTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryTask indicates an expected call of RetryTask.
func (mr *MockExtendedQuobyteApiMockRecorder) RetryTask(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryTask", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).RetryTask), arg0)
}

// RevokeCertificate mocks base method.
func (m *MockExtendedQuobyteApi) RevokeCertificate(arg0 *quobyte.RevokeCertificateRequest) (*quobyte.RevokeCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeCertificate", arg0)
	ret0, _ := ret[0].(*quobyte.RevokeCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeCertificate indicates an expected call of RevokeCertificate.
func (mr *MockExtendedQuobyteApiMockRecorder) RevokeCertificate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeCertificate", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).RevokeCertificate), arg0)
}

// SetAPIRetryPolicy mocks base method.
func (m *MockExtendedQuobyteApi) SetAPIRetryPolicy(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAPIRetryPolicy", arg0)
}

// SetAPIRetryPolicy indicates an expected call of SetAPIRetryPolicy.
func (mr *MockExtendedQuobyteApiMockRecorder) SetAPIRetryPolicy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIRetryPolicy", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).SetAPIRetryPolicy), arg0)
}

// SetCertificateOwner mocks base method.
func (m *MockExtendedQuobyteApi) SetCertificateOwner(arg0 *quobyte.SetCertificateOwnerRequest) (*quobyte.SetCertificateOwnerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCertificateOwner", arg0)
	ret0, _ := ret[0].(*quobyte.SetCertificateOwnerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCertificateOwner indicates an expected call of SetCertificateOwner.
func (mr *MockExtendedQuobyteApiMockRecorder) SetCertificateOwner(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCertificateOwner", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).SetCertificateOwner), arg0)
}

// SetCertificateSubject mocks base method.
func (m *MockExtendedQuobyteApi) SetCertificateSubject(arg0 *quobyte.SetCertificateSubjectRequest) (*quobyte.SetCertificateSubjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCertificateSubject", arg0)
	ret0, _ := ret[0].(*quobyte.SetCertificateSubjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCertificateSubject indicates an expected call of SetCertificateSubject.
func (mr *MockExtendedQuobyteApiMockRecorder) SetCertificateSubject(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCertificateSubject", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).SetCertificateSubject), arg0)
}

// SetConfiguration mocks base method.
func (m *MockExtendedQuobyteApi) SetConfiguration(arg0 *quobyte.SetConfigurationRequest) (*quobyte.SetConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfiguration", arg0)
	ret0, _ := ret[0].(*quobyte.SetConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetConfiguration indicates an expected call of SetConfiguration.
func (mr *MockExtendedQuobyteApiMockRecorder) SetConfiguration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfiguration", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).SetConfiguration), arg0)
}

// SetEncryptedVolumeKey mocks base method.
func (m *MockExtendedQuobyteApi) SetEncryptedVolumeKey(arg0 *quobyte.SetEncryptedVolumeKeyRequest) (*quobyte.SetEncryptedVolumeKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEncryptedVolumeKey", arg0)
	ret0, _ := ret[0].(*quobyte.SetEncryptedVolumeKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEncryptedVolumeKey indicates an expected call of SetEncryptedVolumeKey.
func (mr *MockExtendedQuobyteApiMockRecorder) SetEncryptedVolumeKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEncryptedVolumeKey", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).SetEncryptedVolumeKey), arg0)
}

// SetLabels mocks base method.
func (m *MockExtendedQuobyteApi) SetLabels(arg0 *quobyte.SetLabelsRequest) (*quobyte.SetLabelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLabels", arg0)
	ret0, _ := ret[0].(*quobyte.SetLabelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLabels indicates an expected call of SetLabels.
func (mr *MockExtendedQuobyteApiMockRecorder) SetLabels(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabels", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).SetLabels), arg0)
}

// SetLicenseKey mocks base method.
func (m *MockExtendedQuobyteApi) SetLicenseKey(arg0 *quobyte.SetLicenseKeyRequest) (*quobyte.SetLicenseKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLicenseKey", arg0)
	ret0, _ := ret[0].(*quobyte.SetLicenseKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLicenseKey indicates an expected call of SetLicenseKey.
func (mr *MockExtendedQuobyteApiMockRecorder) SetLicenseKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLicenseKey", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).SetLicenseKey), arg0)
}

// SetNotificationRule mocks base method.
func (m *MockExtendedQuobyteApi) SetNotificationRule(arg0 *quobyte.SetNotificationRuleRequest) (*quobyte.SetNotificationRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNotificationRule", arg0)
	ret0, _ := ret[0].(*quobyte.SetNotificationRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNotificationRule indicates an expected call of SetNotificationRule.
func (mr *MockExtendedQuobyteApiMockRecorder) SetNotificationRule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNotificationRule", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).SetNotificationRule), arg0)
}

// SetQuota mocks base method.
func (m *MockExtendedQuobyteApi) SetQuota(arg0 *quobyte.SetQuotaRequest) (*quobyte.SetQuotaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQuota", arg0)
	ret0, _ := ret[0].(*quobyte.SetQuotaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetQuota indicates an expected call of SetQuota.
func (mr *MockExtendedQuobyteApiMockRecorder) SetQuota(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQuota", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).SetQuota), arg0)
}

// SetTenant mocks base method.
func (m *MockExtendedQuobyteApi) SetTenant(arg0 *quobyte.SetTenantRequest) (*quobyte.SetTenantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTenant", arg0)
	ret0, _ := ret[0].(*quobyte.SetTenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTenant indicates an expected call of SetTenant.
func (mr *MockExtendedQuobyteApiMockRecorder) SetTenant(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTenant", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).SetTenant), arg0)
}

// SetTransport mocks base method.
func (m *MockExtendedQuobyteApi) SetTransport(arg0 http.RoundTripper) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockExtendedQuobyteApiMockRecorder) SetTransport(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).SetTransport), arg0)
}

// SetVolumeQuota mocks base method.
func (m *MockExtendedQuobyteApi) SetVolumeQuota(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVolumeQuota", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVolumeQuota indicates an expected call of SetVolumeQuota.
func (mr *MockExtendedQuobyteApiMockRecorder) SetVolumeQuota(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolumeQuota", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).SetVolumeQuota), arg0, arg1)
}

// SilenceAlert mocks base method.
func (m *MockExtendedQuobyteApi) SilenceAlert(arg0 *quobyte.SilenceAlertRequest) (*quobyte.SilenceAlertResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SilenceAlert", arg0)
	ret0, _ := ret[0].(*quobyte.SilenceAlertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SilenceAlert indicates an expected call of SilenceAlert.
func (mr *MockExtendedQuobyteApiMockRecorder) SilenceAlert(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SilenceAlert", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).SilenceAlert), arg0)
}

// StartNetworkTest mocks base method.
func (m *MockExtendedQuobyteApi) StartNetworkTest(arg0 *quobyte.StartNetworkTestRequest) (*quobyte.StartNetworkTestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartNetworkTest", arg0)
	ret0, _ := ret[0].(*quobyte.StartNetworkTestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartNetworkTest indicates an expected call of StartNetworkTest.
func (mr *MockExtendedQuobyteApiMockRecorder) StartNetworkTest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNetworkTest", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).StartNetworkTest), arg0)
}

// TriggerVolumeCheckpoint mocks base method.
func (m *MockExtendedQuobyteApi) TriggerVolumeCheckpoint(arg0 *quobyte.TriggerVolumeCheckpointRequest) (*quobyte.TriggerVolumeCheckpointResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerVolumeCheckpoint", arg0)
	ret0, _ := ret[0].(*quobyte.TriggerVolumeCheckpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerVolumeCheckpoint indicates an expected call of TriggerVolumeCheckpoint.
func (mr *MockExtendedQuobyteApiMockRecorder) TriggerVolumeCheckpoint(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerVolumeCheckpoint", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).TriggerVolumeCheckpoint), arg0)
}

// UnlockMasterKeystoreSlot mocks base method.
func (m *MockExtendedQuobyteApi) UnlockMasterKeystoreSlot(arg0 *quobyte.UnlockMasterKeystoreSlotRequest) (*quobyte.UnlockMasterKeystoreSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockMasterKeystoreSlot", arg0)
	ret0, _ := ret[0].(*quobyte.UnlockMasterKeystoreSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockMasterKeystoreSlot indicates an expected call of UnlockMasterKeystoreSlot.
func (mr *MockExtendedQuobyteApiMockRecorder) UnlockMasterKeystoreSlot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockMasterKeystoreSlot", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).UnlockMasterKeystoreSlot), arg0)
}

// UnpublishBucketVolume mocks base method.
func (m *MockExtendedQuobyteApi) UnpublishBucketVolume(arg0 *quobyte.UnpublishBucketVolumeRequest) (*quobyte.UnpublishBucketVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpublishBucketVolume", arg0)
	ret0, _ := ret[0].(*quobyte.UnpublishBucketVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpublishBucketVolume indicates an expected call of UnpublishBucketVolume.
func (mr *MockExtendedQuobyteApiMockRecorder) UnpublishBucketVolume(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpublishBucketVolume", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).UnpublishBucketVolume), arg0)
}

// UpdateDevice mocks base method.
func (m *MockExtendedQuobyteApi) UpdateDevice(arg0 *quobyte.UpdateDeviceRequest) (*quobyte.UpdateDeviceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", arg0)
	ret0, _ := ret[0].(*quobyte.UpdateDeviceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockExtendedQuobyteApiMockRecorder) UpdateDevice(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).UpdateDevice), arg0)
}

// UpdatePolicyRules mocks base method.
func (m *MockExtendedQuobyteApi) UpdatePolicyRules(arg0 *quobyte.UpdatePolicyRulesRequest) (*quobyte.UpdatePolicyRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicyRules", arg0)
	ret0, _ := ret[0].(*quobyte.UpdatePolicyRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicyRules indicates an expected call of UpdatePolicyRules.
func (mr *MockExtendedQuobyteApiMockRecorder) UpdatePolicyRules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicyRules", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).UpdatePolicyRules), arg0)
}

// UpdateUser mocks base method.
func (m *MockExtendedQuobyteApi) UpdateUser(arg0 *quobyte.UpdateUserRequest) (*quobyte.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(*quobyte.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockExtendedQuobyteApiMockRecorder) UpdateUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).UpdateUser), arg0)
}

// UpdateVolume mocks base method.
func (m *MockExtendedQuobyteApi) UpdateVolume(arg0 *quobyte.UpdateVolumeRequest) (*quobyte.UpdateVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", arg0)
	ret0, _ := ret[0].(*quobyte.UpdateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockExtendedQuobyteApiMockRecorder) UpdateVolume(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).UpdateVolume), arg0)
}

// VerifyLicense mocks base method.
func (m *MockExtendedQuobyteApi) VerifyLicense(arg0 *quobyte.VerifyLicenseRequest) (*quobyte.VerifyLicenseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyLicense", arg0)
	ret0, _ := ret[0].(*quobyte.VerifyLicenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyLicense indicates an expected call of VerifyLicense.
func (mr *MockExtendedQuobyteApiMockRecorder) VerifyLicense(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyLicense", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).VerifyLicense), arg0)
}

// WhoAmI mocks base method.
func (m *MockExtendedQuobyteApi) WhoAmI(arg0 *quobyte.WhoAmIRequest) (*quobyte.WhoAmIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhoAmI", arg0)
	ret0, _ := ret[0].(*quobyte.WhoAmIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhoAmI indicates an expected call of WhoAmI.
func (mr *MockExtendedQuobyteApiMockRecorder) WhoAmI(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoAmI", reflect.TypeOf((*MockExtendedQuobyteApi)(nil).WhoAmI), arg0)
}
